// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4949.LeVapeur.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4949.LeVapeur.Robot;

/**
 *
 */
public class Forward extends Command {
	private double driveForwardSpeed = 0.5;
	private double distance;
	private double error;
	private final double kTolerance = 0.1;
	private final double kP = -1.0 / 5.0;
		
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Forward() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
    }
    	public Forward(double dist) {
    		this(dist, 0.5);
    	}

    	public Forward(double dist, double maxSpeed) {
    		requires(Robot.drive);
    		distance = dist;
  
        }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.drive.getRightRearEncoder().reset();
		setTimeout(2);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	error = (distance - Robot.drive.getRightRearEncoder().getDistance());
		if (driveForwardSpeed * kP * error >= driveForwardSpeed) {
			Robot.drive.mecanumDrive(driveForwardSpeed, driveForwardSpeed, 0, 0);
		} else {
			Robot.drive.mecanumDrive(driveForwardSpeed * kP * error, driveForwardSpeed * kP * error, 0 * kP * error, 0 * kP * error);
			}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return (Math.abs(error) <= kTolerance) || isTimedOut();
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drive.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
