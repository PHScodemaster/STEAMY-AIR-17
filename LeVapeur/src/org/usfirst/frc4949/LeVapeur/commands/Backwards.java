// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4949.LeVapeur.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4949.LeVapeur.Robot;

/**
 *
 */
public class Backwards extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
		private double m_distance;
		private double m_speed;
	    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
		 public static int session;
		    public static long currentTime;
		    public static int currentSegment;
		    public static int angleSetpoint;
		    //public static double forwardSpeed;
		    public static double yAxis;
		    public static double xAxis;
		    public static double angle;
		    public static double zAxis;
		    
		    private double driveBackwardSpeed;
			private double distance;
			private double distanceMoved;
			private double startTimeMillis;
			private double currentTimeMillis;
			private double error;
			private final double kTolerance = 0.1;
			private final double kP = -1;  // -1.0 / 5.0;
			private final double kSpeedConv = .00076923; 
		    
    public Backwards() {
	    	this(10, 0.5);
	    }
    public Backwards(double dist) {
    	this(dist, 0.5);
    }
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    public Backwards(double dist, double spd) {
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        
    	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    m_distance = dist;
    m_speed = spd;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
 // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	requires(Robot.drive);
    	
    	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        distance = dist;
        driveBackwardSpeed = spd;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	startTimeMillis = System.currentTimeMillis();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (Robot.hasEncoders) {
    		error = (distance - Robot.drive.getLeftFrontEncoder().getDistance());
    	} else {
        	currentTimeMillis = System.currentTimeMillis();
        	distanceMoved = (currentTimeMillis - startTimeMillis) * driveBackwardSpeed * kSpeedConv;
    		error = distance - distanceMoved;
    	}
    	if ( error >= 0) {
			Robot.drive.mecanumDrive(0, driveBackwardSpeed *kP, 0, 0);
			
		}	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if (error <= 0) {
    		return true;
    	}
    	else {
    		return false;
    	}
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drive.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
