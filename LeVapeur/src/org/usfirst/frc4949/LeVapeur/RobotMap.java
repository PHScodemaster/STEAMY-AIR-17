// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4949.LeVapeur;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Compressor pneumaticsCompressor1;
    public static Solenoid pneumaticsLiftSolenoid1;
    public static Solenoid pneumaticsLiftSolenoid2;
    public static Solenoid pneumaticsGobblerSolenoid;
    public static Solenoid pneumaticsRockerSolenoid;
    public static Servo pneumaticsLiftydo1;
    public static Servo pneumaticsLiftydo2;
    public static SpeedController pickerPickerMotor;
    public static Encoder driveRREncoder;
    public static Encoder driveFREncoder;
    public static Encoder driveFLEncoder;
    public static Encoder driveRLEncoder;
    public static SpeedController driveFrontLeftMotor;
    public static SpeedController driveRearLeftMotor;
    public static SpeedController driveFrontRightMotor;
    public static SpeedController driveRearRightMotor;
    public static RobotDrive driveMecanum;
    public static SpeedController climberClimberMotor;
    public static Servo cameraPanServo;
    public static Servo cameraTiltServo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static ADXRS450_Gyro driveADXRS450_Gyro;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        pneumaticsCompressor1 = new Compressor(0);
        
        
        pneumaticsLiftSolenoid1 = new Solenoid(0, 0);
        LiveWindow.addActuator("Pneumatics", "LiftSolenoid1", pneumaticsLiftSolenoid1);
        
        pneumaticsLiftSolenoid2 = new Solenoid(0, 1);
        LiveWindow.addActuator("Pneumatics", "LiftSolenoid2", pneumaticsLiftSolenoid2);
        
        pneumaticsGobblerSolenoid = new Solenoid(0, 2);
        LiveWindow.addActuator("Pneumatics", "GobblerSolenoid", pneumaticsGobblerSolenoid);
        
        pneumaticsRockerSolenoid = new Solenoid(0, 3);
        LiveWindow.addActuator("Pneumatics", "RockerSolenoid", pneumaticsRockerSolenoid);
        
        pneumaticsLiftydo1 = new Servo(8);
        LiveWindow.addActuator("Pneumatics", "Liftydo1", pneumaticsLiftydo1);
        
        pneumaticsLiftydo2 = new Servo(9);
        LiveWindow.addActuator("Pneumatics", "Liftydo2", pneumaticsLiftydo2);
        
        pickerPickerMotor = new Talon(4);
        LiveWindow.addActuator("Picker", "PickerMotor", (Talon) pickerPickerMotor);
        
        driveRREncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "RR Encoder ", driveRREncoder);
        driveRREncoder.setDistancePerPulse(0.065625);
        driveRREncoder.setPIDSourceType(PIDSourceType.kRate);
        driveFREncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "FR Encoder ", driveFREncoder);
        driveFREncoder.setDistancePerPulse(0.065625);
        driveFREncoder.setPIDSourceType(PIDSourceType.kRate);
        driveFLEncoder = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "FL Encoder ", driveFLEncoder);
        driveFLEncoder.setDistancePerPulse(0.065625);
        driveFLEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveRLEncoder = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "RL Encoder", driveRLEncoder);
        driveRLEncoder.setDistancePerPulse(0.065625);
        driveRLEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveFrontLeftMotor = new Talon(2);
        LiveWindow.addActuator("Drive", "FrontLeft Motor", (Talon) driveFrontLeftMotor);
        
        driveRearLeftMotor = new Talon(3);
        LiveWindow.addActuator("Drive", "RearLeft Motor", (Talon) driveRearLeftMotor);
        
        driveFrontRightMotor = new Talon(1);
        LiveWindow.addActuator("Drive", "FrontRight Motor", (Talon) driveFrontRightMotor);
        
        driveRearRightMotor = new Talon(0);
        LiveWindow.addActuator("Drive", "RearRight Motor", (Talon) driveRearRightMotor);
        
        driveMecanum = new RobotDrive(driveFrontLeftMotor, driveRearLeftMotor,
              driveFrontRightMotor, driveRearRightMotor);
        
        driveMecanum.setSafetyEnabled(true);
        driveMecanum.setExpiration(0.1);
        driveMecanum.setSensitivity(0.5);
        driveMecanum.setMaxOutput(1.0);

        driveMecanum.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveMecanum.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        climberClimberMotor = new Talon(5);
        LiveWindow.addActuator("Climber", "ClimberMotor", (Talon) climberClimberMotor);
        
        cameraPanServo = new Servo(6);
        LiveWindow.addActuator("Camera", "PanServo", cameraPanServo);
        
        cameraTiltServo = new Servo(7);
        LiveWindow.addActuator("Camera", "TiltServo", cameraTiltServo);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
