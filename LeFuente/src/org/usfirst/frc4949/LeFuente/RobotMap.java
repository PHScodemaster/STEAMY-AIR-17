// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4949.LeFuente;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Compressor pneumaticsCompressor1;
    public static Solenoid pneumaticsLiftSolenoid1;
    public static Solenoid pneumaticsLiftSolenoid2;
    public static Solenoid pneumaticsGobblerSolenoid;
    public static Solenoid pneumaticsRockerSolenoid;
    public static SpeedController pickerPickerMotor;
    public static Encoder driveQuadratureEncoder1;
    public static Encoder driveQuadratureEncoder2;
    public static Encoder driveQuadratureEncoder3;
    public static Encoder driveQuadratureEncoder4;
    public static SpeedController driveFrontLeft;
    public static SpeedController driveRearLeft;
    public static SpeedController driveFrontRight;
    public static SpeedController driveRearRight;
    public static AnalogGyro driveAnalogGyro1;
    public static SpeedController climberClimberMotor;
    public static Servo cameraPanServo;
    public static Servo cameraTiltServo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        pneumaticsCompressor1 = new Compressor(0);
        
        
        pneumaticsLiftSolenoid1 = new Solenoid(0, 0);
        LiveWindow.addActuator("Pneumatics", "LiftSolenoid1", pneumaticsLiftSolenoid1);
        
        pneumaticsLiftSolenoid2 = new Solenoid(0, 1);
        LiveWindow.addActuator("Pneumatics", "LiftSolenoid2", pneumaticsLiftSolenoid2);
        
        pneumaticsGobblerSolenoid = new Solenoid(0, 2);
        LiveWindow.addActuator("Pneumatics", "GobblerSolenoid", pneumaticsGobblerSolenoid);
        
        pneumaticsRockerSolenoid = new Solenoid(0, 3);
        LiveWindow.addActuator("Pneumatics", "RockerSolenoid", pneumaticsRockerSolenoid);
        
        pickerPickerMotor = new Talon(0);
        LiveWindow.addActuator("Picker", "PickerMotor", (Talon) pickerPickerMotor);
        
        driveQuadratureEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "Quadrature Encoder 1", driveQuadratureEncoder1);
        driveQuadratureEncoder1.setDistancePerPulse(1.0);
        driveQuadratureEncoder1.setPIDSourceType(PIDSourceType.kRate);
        driveQuadratureEncoder2 = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "Quadrature Encoder 2", driveQuadratureEncoder2);
        driveQuadratureEncoder2.setDistancePerPulse(1.0);
        driveQuadratureEncoder2.setPIDSourceType(PIDSourceType.kRate);
        driveQuadratureEncoder3 = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "Quadrature Encoder 3", driveQuadratureEncoder3);
        driveQuadratureEncoder3.setDistancePerPulse(1.0);
        driveQuadratureEncoder3.setPIDSourceType(PIDSourceType.kRate);
        driveQuadratureEncoder4 = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "Quadrature Encoder 4", driveQuadratureEncoder4);
        driveQuadratureEncoder4.setDistancePerPulse(1.0);
        driveQuadratureEncoder4.setPIDSourceType(PIDSourceType.kRate);
        driveFrontLeft = new Talon(2);
        LiveWindow.addActuator("Drive", "FrontLeft", (Talon) driveFrontLeft);
        
        driveRearLeft = new Talon(3);
        LiveWindow.addActuator("Drive", "RearLeft", (Talon) driveRearLeft);
        
        driveFrontRight = new Talon(1);
        LiveWindow.addActuator("Drive", "FrontRight", (Talon) driveFrontRight);
        
        driveRearRight = new Talon(4);
        LiveWindow.addActuator("Drive", "RearRight", (Talon) driveRearRight);
        
        driveAnalogGyro1 = new AnalogGyro(0);
        LiveWindow.addSensor("Drive", "AnalogGyro 1", driveAnalogGyro1);
        driveAnalogGyro1.setSensitivity(0.007);
        climberClimberMotor = new Talon(5);
        LiveWindow.addActuator("Climber", "ClimberMotor", (Talon) climberClimberMotor);
        
        cameraPanServo = new Servo(6);
        LiveWindow.addActuator("Camera", "PanServo", cameraPanServo);
        
        cameraTiltServo = new Servo(7);
        LiveWindow.addActuator("Camera", "TiltServo", cameraTiltServo);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
